import { getMainKeyboard } from '../keyboards.js'
import { generateReferralLink, handleReferral } from '../utils/referralUtils.js'

export default function startCommand(bot, prisma) {
	bot.start(async ctx => {
		if (!ctx.message || !('text' in ctx.message)) return
		if (!ctx.from) return

		const referrerId = ctx.message.text.split(' ')[1]
		const userId = ctx.from.id
		const username = ctx.from.username || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

		try {
			// 1. –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
			if (referrerId && referrerId !== userId.toString()) {
				await handleReferral(ctx, prisma, referrerId)
			}

			// 2. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
			const isSubscribed = await checkSubscription(ctx)

			// 3. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await prisma.user.upsert({
				where: { userId: BigInt(userId) },
				create: {
					userId: BigInt(userId),
					username: ctx.from.username,
					firstName: ctx.from.first_name,
					isSubscribed,
				},
				update: {
					isSubscribed,
				},
			})

			// 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
			if (isSubscribed) {
				await handleSubscribedUser(ctx, username)
			} else {
				await askForSubscription(ctx)
			}
		} catch (error) {
			console.error('Start error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	})

	bot.hears('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', async ctx => {
		try {
			const referralLink = await generateReferralLink(ctx)
			const user = await prisma.user.findUnique({
				where: { userId: Number(ctx.from.id) },
				include: { _count: { select: { referrals: true } } },
			})

			await ctx.reply(
				`üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n` +
					`–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã!\n\n` +
					`üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
					`${referralLink}\n\n` +
					`üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user?._count?.referrals || 0} —á–µ–ª–æ–≤–µ–∫\n` +
					`‚≠ê –í–∞—à–∏ –±–∞–ª–ª—ã: ${user?.points || 0}`,
				{ parse_mode: 'Markdown' }
			)
		} catch (error) {
			console.error('Referral link error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.')
		}
	})
	bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', async ctx => {
		try {
			await ctx.reply(`–ó–∞ –ø–æ–º–æ—à—å—é –æ–±—Ä–∞—à–∞–π—Ç–µ—Å—å @nurullayev_me`)
		} catch (error) {
			console.error('Referral link error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–æ—â—å.')
		}
	})
}

async function checkSubscription(ctx) {
	try {
		const [channelMember, groupMember] = await Promise.all([
			ctx.telegram.getChatMember('@indiga_test_channel', ctx.from.id),
			ctx.telegram.getChatMember('@indigatestgruppa', ctx.from.id),
		])

		const isChannelSubscribed = ['member', 'administrator', 'creator'].includes(
			channelMember.status
		)
		const isGroupSubscribed = ['member', 'administrator', 'creator'].includes(
			groupMember.status
		)

		return isChannelSubscribed && isGroupSubscribed
	} catch (error) {
		console.error('Subscription check error:', error)
		return false
	}
}

async function showMainMenu(ctx) {
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainKeyboard())
}

async function handleSubscribedUser(ctx, username, referralResult) {
	let welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`

	await ctx.reply(welcomeMessage)
	await showMainMenu(ctx)
}

async function askForSubscription(ctx) {
	await ctx.reply(
		'–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n' +
			'1. –ö–∞–Ω–∞–ª: @indiga_test_channel\n' +
			'2. –ì—Ä—É–ø–ø—É: @indigatestgruppa\n\n' +
			'–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start',
		{
			reply_markup: {
				inline_keyboard: [
					[
						{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª', url: 'https://t.me/indiga_test_channel' },
						{ text: '–û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É', url: 'https://t.me/indigatestgruppa' },
					],
					[{ text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }],
				],
			},
		}
	)
}
