import { getMainKeyboard } from '../keyboards.js'
import { generateReferralLink, handleReferral } from '../utils/referralUtils.js'

export default function startCommand(bot, prisma) {
	bot.start(async ctx => {
		if (!ctx.message || !('text' in ctx.message)) return
		if (!ctx.from) return

		const referrerId = ctx.message.text.split(' ')[1]
		const userId = ctx.from.id
		const username = ctx.from.username || '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

		try {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
			const referralResult = await handleReferral(ctx, prisma)

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
			const isSubscribed = await checkSubscription(ctx)

			// –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await prisma.user.upsert({
				where: { userId: Number(userId) },
				create: {
					userId: Number(userId),
					username: ctx.from.username,
					firstName: ctx.from.first_name,
					isSubscribed,
				},
				update: {
					isSubscribed,
				},
			})

			if (isSubscribed) {
				await handleSubscribedUser(ctx, username, referralResult)
			} else {
				await askForSubscription(ctx)
			}
		} catch (error) {
			console.error('Start error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
		}
	})

	bot.hears('üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', async ctx => {
		try {
			const referralLink = await generateReferralLink(ctx)
			const user = await prisma.user.findUnique({
				where: { userId: Number(ctx.from.id) },
				include: { _count: { select: { referrals: true } } },
			})

			await ctx.reply(
				`üéÅ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n` +
					`–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã!\n\n` +
					`üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
					`${referralLink}\n\n` +
					`üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${user?._count?.referrals || 0} —á–µ–ª–æ–≤–µ–∫\n` +
					`‚≠ê –í–∞—à–∏ –±–∞–ª–ª—ã: ${user?.points || 0}`,
				{ parse_mode: 'Markdown' }
			)
		} catch (error) {
			console.error('Referral link error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏.')
		}
	})
	bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', async ctx => {
		try {
			await ctx.reply(`–ó–∞ –ø–æ–º–æ—à—å—é –æ–±—Ä–∞—à–∞–π—Ç–µ—Å—å @nurullayev_me`)
		} catch (error) {
			console.error('Referral link error:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–æ—â—å.')
		}
	})
}

async function checkSubscription(ctx) {
	try {
		const [channelMember, groupMember] = await Promise.all([
			ctx.telegram.getChatMember('@indiga_test_channel', ctx.from.id),
			ctx.telegram.getChatMember('@indigatestgruppa', ctx.from.id),
		])

		const isChannelSubscribed = ['member', 'administrator', 'creator'].includes(
			channelMember.status
		)
		const isGroupSubscribed = ['member', 'administrator', 'creator'].includes(
			groupMember.status
		)

		return isChannelSubscribed && isGroupSubscribed
	} catch (error) {
		console.error('Subscription check error:', error)
		return false
	}
}

async function showMainMenu(ctx) {
	await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', getMainKeyboard())
}

async function handleSubscribedUser(ctx, username, referralResult) {
	let welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!`

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
	// if (process.env.GROUP_CHAT_ID) {
	//   try {
	//     if (referralResult?.referrer) {
	//       welcomeMessage += `\n\n–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @${referralResult.referrer.username || '–ê–Ω–æ–Ω–∏–º'}`;

	//       await ctx.telegram.sendMessage(
	//         process.env.GROUP_CHAT_ID,
	//         `üéâ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—É!\n\n` +
	//         `–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: @${username}\n` +
	//         `–ü–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é: @${referralResult.referrer.username || '–ê–Ω–æ–Ω–∏–º'}\n` +
	//         `–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! üëã`
	//       );
	//     } else {
	//       await ctx.telegram.sendMessage(
	//         process.env.GROUP_CHAT_ID,
	//         `üéâ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n\n` +
	//         `–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: @${username}\n` +
	//         `–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! üëã`
	//       );
	//     }
	//   } catch (groupError) {
	//     console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:', groupError);
	//   }
	// }

	await ctx.reply(welcomeMessage)
	await showMainMenu(ctx)
}
