
export default function startCommand(bot, prisma) {
  bot.start(async (ctx) => {
      if (!ctx.message || !('text' in ctx.message)) return;
      if (!ctx.from) return;

      const messageText = ctx.message.text;
      const referrerId = messageText.split(' ')[1] || null;
      const userId = ctx.from.id;
      const username = ctx.from.username;
      const firstName = ctx.from.first_name;

      try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
          let isSubscribed = false;
          try {
              const member = await ctx.telegram.getChatMember(
                  process.env.CHANNEL_USERNAME,
                  userId
              );
              isSubscribed = ['member', 'administrator', 'creator'].includes(member.status);
          } catch (error) {
              console.error('Error checking subscription:', error);
          }

          // –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ë–î
          let user = await prisma.user.findUnique({
              where: { userId: BigInt(userId) }
          });

          if (!user) {
              user = await prisma.user.create({
                  data: {
                      userId: BigInt(userId),
                      username,
                      firstName,
                      referrerId: referrerId ? BigInt(referrerId) : null,
                      isSubscribed
                  }
              });

              if (referrerId) {
                  await prisma.user.update({
                      where: { userId: BigInt(referrerId) },
                      data: { points: { increment: 1 } }
                  });
              }
          } else if (user.isSubscribed !== isSubscribed) {
              await prisma.user.update({
                  where: { userId: BigInt(userId) },
                  data: { isSubscribed }
              });
          }

          // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (isSubscribed) {
              // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
              await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                  reply_markup: {
                    keyboard: [
                      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }],
                      [{ text: 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞' }], 
                      [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }],
                      [{ text: 'üèÜ –¢–æ–ø 10 –ª–∏–¥–µ—Ä–æ–≤' }]
                  ],
                      resize_keyboard: true
                  }
              });
              
           
          } else {
              // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
              await ctx.reply(
                  `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: ${process.env.CHANNEL_USERNAME}\n\n` +
                  `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start`
              );
          }
      } catch (error) {
          console.error('Start command error:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
  });
}
